name: TEST

on:
  workflow_dispatch:
    inputs:
      kernel_url:
        description: 'Input URL file kernel (aria2c download)'
        required: true
        type: string
      target_repo:
        description: 'Target repository in format owner/repo'
        required: true
        type: string
      target_branch:
        description: 'Target branch (default: main)'
        required: false
        default: main
        type: string

jobs:
  download_extract_push:
    runs-on: ubuntu-latest
    env:
      PAT: ${{ secrets.TARGET_REPO_PAT }}

    steps:
      - name: Setup variables
        id: vars
        run: |
          echo "kernel_url=${{ github.event.inputs.kernel_url }}" >> $GITHUB_OUTPUT
          echo "target_repo=${{ github.event.inputs.target_repo }}" >> $GITHUB_OUTPUT
          echo "target_branch=${{ github.event.inputs.target_branch || 'main' }}" >> $GITHUB_OUTPUT

      - name: Normalize target_repo input
        id: fixrepo
        run: |
          repo="${{ steps.vars.outputs.target_repo }}"
          if [[ "$repo" == https://github.com/* ]]; then
            repo="${repo#https://github.com/}"
            repo="${repo%/}"
          fi
          echo "normalized_repo=$repo" >> $GITHUB_OUTPUT

      - name: Extract version from kernel URL
        id: version_extract
        run: |
          filename=$(basename "${{ steps.vars.outputs.kernel_url }}")
          echo "Filename: $filename"

          if [[ "$filename" =~ ([0-9]+\.[0-9]+(\.[0-9]+)?) ]]; then
            version=${BASH_REMATCH[1]}
          else
            version="unknown"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install aria2 and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip

      - name: Download kernel archive via aria2c (silent)
        run: |
          aria2c --console-log-level=error -x 16 -s 16 -k 1M -o kernel-archive "${{ steps.vars.outputs.kernel_url }}"

      - name: Determine archive file and extract accordingly
        run: |
          file kernel-archive
          ARCHIVE_TYPE=$(file kernel-archive)

          mkdir kernel-extracted

          if [[ $ARCHIVE_TYPE =~ gzip ]]; then
            echo "Detected gzip archive (.tar.gz or .tar)"
            tar -xzf kernel-archive -C kernel-extracted
          elif [[ $ARCHIVE_TYPE =~ Zip ]]; then
            echo "Detected ZIP archive"
            unzip kernel-archive -d kernel-extracted
          elif [[ $ARCHIVE_TYPE =~ POSIX.*tar ]]; then
            echo "Detected tar archive"
            tar -xf kernel-archive -C kernel-extracted
          else
            echo "Unknown archive format!"
            exit 1
          fi

      - name: Clone target repo
        env:
          PAT: ${{ secrets.TARGET_REPO_PAT }}
          TARGET_REPO: ${{ steps.fixrepo.outputs.normalized_repo }}
          TARGET_BRANCH: ${{ steps.vars.outputs.target_branch }}
        run: |
          git clone https://x-access-token:${PAT}@github.com/${TARGET_REPO}.git target-repo
          cd target-repo
          git checkout ${TARGET_BRANCH} || git checkout -b ${TARGET_BRANCH}

      - name: Copy kernel files to target repo folder kernel/<version>/
        run: |
          cd target-repo
          mkdir -p kernel/${{ steps.version_extract.outputs.version }}
          rm -rf kernel/${{ steps.version_extract.outputs.version }}/* || true
          cp -R ../kernel-extracted/* kernel/${{ steps.version_extract.outputs.version }}/

      - name: Commit and push changes using PAT-authenticated remote
        env:
          PAT: ${{ secrets.TARGET_REPO_PAT }}
          TARGET_REPO: ${{ steps.fixrepo.outputs.normalized_repo }}
          TARGET_BRANCH: ${{ steps.vars.outputs.target_branch }}
        run: |
          cd target-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add kernel/${{ steps.version_extract.outputs.version }}/
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update kernel ${{ steps.version_extract.outputs.version }} files from workflow run #${{ github.run_number }}"
            # Set remote URL dengan PAT agar push berhasil authenticasi
            git remote set-url origin https://x-access-token:${PAT}@github.com/${TARGET_REPO}.git
            git push origin ${TARGET_BRANCH}
          fi
